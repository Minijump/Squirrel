# Generated by Selenium IDE; edited
import pytest
import warnings

from selenium.webdriver.common.by import By
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC


class TestDataSourcesTours:    
    @pytest.mark.slow
    def test_create_data_source_modal(self, server, browser, reset_projects):
        """
        Test create project modal appears and disappears
        """
        browser.get(f"{server}/projects/")

        # Create a project
        browser.find_element(By.CSS_SELECTOR, "p:nth-child(1)").click()
        browser.find_element(By.ID, "projectName").click()
        browser.find_element(By.ID, "projectName").send_keys("test create data source modal")
        browser.find_element(By.CSS_SELECTOR, ".btn-primary").click()

        # Go to data sources
        browser.find_element(By.LINK_TEXT, "Data sources").click()
        # Open modal
        browser.find_element(By.CSS_SELECTOR, "p").click()
        WebDriverWait(browser, 2, poll_frequency=0.1).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, ".modal-content")))
        # Close modal
        browser.find_element(By.ID, "cancelButton").click()
        WebDriverWait(browser, 2, poll_frequency=0.1).until(expected_conditions.invisibility_of_element_located((By.CSS_SELECTOR, ".modal-content")))

    @pytest.mark.slow
    def test_form_input_depends_data_source_type(self, server, browser, reset_projects):
        """
        Test that form changes when changing source type
        """
        browser.get(f"{server}/projects/")

        # Create a project
        browser.find_element(By.CSS_SELECTOR, "p:nth-child(1)").click()
        browser.find_element(By.ID, "projectName").click()
        browser.find_element(By.ID, "projectName").send_keys("test data sources inputs")
        browser.find_element(By.CSS_SELECTOR, ".btn-primary").click()

        # Go to data sources
        browser.find_element(By.LINK_TEXT, "Data sources").click()

        # Open modal
        browser.find_element(By.CSS_SELECTOR, "p").click()
        # Check the goods inputs are visible
        WebDriverWait(browser, 2, poll_frequency=0.1).until(expected_conditions.visibility_of_element_located((By.ID, "sourceName")))
        WebDriverWait(browser, 2, poll_frequency=0.1).until(expected_conditions.visibility_of_element_located((By.ID, "sourceDescription")))
        WebDriverWait(browser, 2, poll_frequency=0.1).until(expected_conditions.visibility_of_element_located((By.ID, "sourceFile")))

        # Change source type to Odoo
        browser.find_element(By.ID, "sourceType").click()
        dropdown = browser.find_element(By.ID, "sourceType")
        dropdown.find_element(By.XPATH, "//option[. = 'Odoo']").click()
        browser.find_element(By.CSS_SELECTOR, "option:nth-child(5)").click()
        # Check the goods inputs are visible
        WebDriverWait(browser, 2, poll_frequency=0.1).until(expected_conditions.visibility_of_element_located((By.ID, "odooUrl")))
        WebDriverWait(browser, 2, poll_frequency=0.1).until(expected_conditions.visibility_of_element_located((By.ID, "odooDb")))
        WebDriverWait(browser, 2, poll_frequency=0.1).until(expected_conditions.visibility_of_element_located((By.ID, "odooModel")))

        # Change source type to Yahoo Finance
        browser.find_element(By.ID, "sourceType").click()
        dropdown = browser.find_element(By.ID, "sourceType")
        dropdown.find_element(By.XPATH, "//option[. = 'Yahoo Finance']").click()
        browser.find_element(By.CSS_SELECTOR, "option:nth-child(6)").click()
        # Check the goods inputs are visible
        WebDriverWait(browser, 2, poll_frequency=0.1).until(expected_conditions.visibility_of_element_located((By.ID, "start_date")))
        WebDriverWait(browser, 2, poll_frequency=0.1).until(expected_conditions.visibility_of_element_located((By.ID, "interval")))

        # Change source type to Pickle
        browser.find_element(By.ID, "sourceType").click()
        dropdown = browser.find_element(By.ID, "sourceType")
        dropdown.find_element(By.XPATH, "//option[. = 'Pickle']").click()
        browser.find_element(By.CSS_SELECTOR, "#sourceType > option:nth-child(2)").click()
        # Check the goods inputs are visible
        WebDriverWait(browser, 2, poll_frequency=0.1).until(expected_conditions.visibility_of_element_located((By.ID, "sourceFile")))

    @pytest.mark.slow
    def test_data_source_edit(self, server, browser, reset_projects):
        """
        Test editing a data source
        """
        browser.get(f"{server}/projects/")

        # Open a project and go to data sources
        browser.find_element(By.CSS_SELECTOR, ".card:nth-child(2)").click()
        browser.find_element(By.LINK_TEXT, "Data sources").click()

        # Select the first source and edit it
        browser.find_element(By.CSS_SELECTOR, ".card:nth-child(2)").click()
        browser.find_element(By.ID, "sourceDescription").click()
        description_value = browser.find_element(By.ID, "sourceDescription").get_attribute("value")
        edit_value = ", test edit"
        browser.find_element(By.ID, "sourceDescription").send_keys(edit_value)
        browser.find_element(By.CSS_SELECTOR, ".btn-primary").click()

        # Check the source was edited
        browser.find_element(By.CSS_SELECTOR, ".card:nth-child(2) .card-description").click()
        value = browser.find_element(By.ID, "sourceDescription").get_attribute("value")
        assert value == description_value + edit_value

    @pytest.mark.slow
    def test_create_yahoo_data_source(self, server, browser, reset_projects):
        """
        Test create yahoo data source
        """
        browser.get(f"{server}/projects/")

        # Create a project
        browser.find_element(By.CSS_SELECTOR, "p:nth-child(1)").click()
        browser.find_element(By.ID, "projectName").click()
        browser.find_element(By.ID, "projectName").send_keys("test create yahoo data source")
        browser.find_element(By.CSS_SELECTOR, ".btn-primary").click()

        # Go to data sources
        browser.find_element(By.LINK_TEXT, "Data sources").click()
        # Open create modal and complete the inputs
        browser.find_element(By.CSS_SELECTOR, "p").click()
        browser.find_element(By.ID, "sourceName").click()
        browser.find_element(By.ID, "sourceName").send_keys("test yahoo")
        browser.find_element(By.ID, "sourceDescription").click()
        browser.find_element(By.ID, "sourceDescription").send_keys("a simple test for yahoo data source")
        browser.find_element(By.ID, "sourceType").click()
        dropdown = browser.find_element(By.ID, "sourceType")
        dropdown.find_element(By.XPATH, "//option[. = 'Yahoo Finance']").click()
        browser.find_element(By.CSS_SELECTOR, "option:nth-child(6)").click()
        browser.find_element(By.ID, "tickers").click()
        browser.find_element(By.ID, "tickers").send_keys("[\'AU\']")
        browser.find_element(By.ID, "start_date").click()
        browser.find_element(By.ID, "start_date").send_keys("2025-03-03")
        browser.find_element(By.ID, "end_date").click()
        browser.find_element(By.ID, "end_date").send_keys("2025-03-21")
        browser.find_element(By.CSS_SELECTOR, ".btn-primary:nth-child(9)").click()

        # Check the source was created, and displayed on screen
        elements = WebDriverWait(browser, 2, poll_frequency=0.1).until(
            EC.visibility_of_all_elements_located((By.CSS_SELECTOR, ".card-title"))
        )

        # Raise a warning instead of assertion error, because the test may fail for external reasons
        if not any(element.text.strip() == "test yahoo" for element in elements):
            warnings.warn("Yahoo data source was not created in time")

    @pytest.mark.slow
    def test_delete_data_source(self, server, browser, reset_projects):
        """
        Test data source deletion
        """
        browser.get(f"{server}/projects/")

        # Open a project and go to data sources
        browser.find_element(By.CSS_SELECTOR, ".card:nth-child(2)").click()
        browser.find_element(By.LINK_TEXT, "Data sources").click()

        # Check source is present, before deletion
        source_name = browser.find_element(By.CSS_SELECTOR, ".card:nth-child(2) .card-title").text
        elements = WebDriverWait(browser, 2, poll_frequency=0.1).until(
            EC.visibility_of_all_elements_located((By.CSS_SELECTOR, ".card-title"))
        )
        assert any(element.text.strip() == source_name for element in elements), f"Card with '{source_name}' still present"
        # Select the first source and click on delete button
        browser.find_element(By.CSS_SELECTOR, ".card:nth-child(2)").click()
        browser.find_element(By.CSS_SELECTOR, ".btn-danger").click()

        # Check the source was deleted (check source_name is not present)
        elements = WebDriverWait(browser, 2, poll_frequency=0.1).until(
            EC.visibility_of_all_elements_located((By.CSS_SELECTOR, ".card-title"))
        )
        assert not any(element.text.strip() == source_name for element in elements), f"Card with '{source_name}' still present"