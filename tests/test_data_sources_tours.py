# Generated by Selenium IDE; edited
import pytest

from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.firefox.options import Options


class TestDataSourcesTours():
    def setup_method(self, method):
        options = Options()
        options.add_argument('--headless')

        self.driver = webdriver.Firefox(options=options) #TODO: is too slow
        self.vars = {}
  
    def teardown_method(self, method):
        self.driver.quit()
  
    @pytest.mark.slow
    def test_create_data_source_modal(self, server):
        """
        Test create project modal appears and disappears
        """
        self.driver.get(f"{server}/projects/")
        self.driver.set_window_size(1524, 716)

        # Create a project
        self.driver.find_element(By.CSS_SELECTOR, "p:nth-child(1)").click()
        self.driver.find_element(By.ID, "projectName").click()
        self.driver.find_element(By.ID, "projectName").send_keys("test create data source modal")
        self.driver.find_element(By.CSS_SELECTOR, ".btn-primary").click()

        # Go to data sources
        self.driver.find_element(By.LINK_TEXT, "Data sources").click()
        # Open modal
        self.driver.find_element(By.CSS_SELECTOR, "p").click()
        WebDriverWait(self.driver, 0.001).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, ".modal-content")))
        # Close modal
        self.driver.find_element(By.ID, "cancelButton").click()
        WebDriverWait(self.driver, 0.001).until(expected_conditions.invisibility_of_element_located((By.CSS_SELECTOR, ".modal-content")))

    @pytest.mark.slow
    def test_form_input_depends_data_source_type(self, server):
        """
        Test that form changes when changing source type
        """
        self.driver.get(f"{server}/projects/")
        self.driver.set_window_size(1524, 716)

        # Create a project
        self.driver.find_element(By.CSS_SELECTOR, "p:nth-child(1)").click()
        self.driver.find_element(By.ID, "projectName").click()
        self.driver.find_element(By.ID, "projectName").send_keys("test data sources inputs")
        self.driver.find_element(By.CSS_SELECTOR, ".btn-primary").click()

        # Go to data sources
        self.driver.find_element(By.LINK_TEXT, "Data sources").click()

        # Open modal
        self.driver.find_element(By.CSS_SELECTOR, "p").click()
        # Check the goods inputs are visible
        WebDriverWait(self.driver, 0.001).until(expected_conditions.visibility_of_element_located((By.ID, "sourceName")))
        WebDriverWait(self.driver, 0.001).until(expected_conditions.visibility_of_element_located((By.ID, "sourceDescription")))
        WebDriverWait(self.driver, 0.001).until(expected_conditions.visibility_of_element_located((By.ID, "sourceFile")))

        # Change source type to Odoo
        self.driver.find_element(By.ID, "sourceType").click()
        dropdown = self.driver.find_element(By.ID, "sourceType")
        dropdown.find_element(By.XPATH, "//option[. = 'Odoo']").click()
        self.driver.find_element(By.CSS_SELECTOR, "option:nth-child(5)").click()
        # Check the goods inputs are visible
        WebDriverWait(self.driver, 0.001).until(expected_conditions.visibility_of_element_located((By.ID, "odooUrl")))
        WebDriverWait(self.driver, 0.001).until(expected_conditions.visibility_of_element_located((By.ID, "odooDb")))
        WebDriverWait(self.driver, 0.001).until(expected_conditions.visibility_of_element_located((By.ID, "odooModel")))

        # Change source type to Yahoo Finance
        self.driver.find_element(By.ID, "sourceType").click()
        dropdown = self.driver.find_element(By.ID, "sourceType")
        dropdown.find_element(By.XPATH, "//option[. = 'Yahoo Finance']").click()
        self.driver.find_element(By.CSS_SELECTOR, "option:nth-child(6)").click()
        # Check the goods inputs are visible
        WebDriverWait(self.driver, 0.001).until(expected_conditions.visibility_of_element_located((By.ID, "start_date")))
        WebDriverWait(self.driver, 0.001).until(expected_conditions.visibility_of_element_located((By.ID, "interval")))

        # Change source type to Pickle
        self.driver.find_element(By.ID, "sourceType").click()
        dropdown = self.driver.find_element(By.ID, "sourceType")
        dropdown.find_element(By.XPATH, "//option[. = 'Pickle']").click()
        self.driver.find_element(By.CSS_SELECTOR, "#sourceType > option:nth-child(2)").click()
        # Check the goods inputs are visible
        WebDriverWait(self.driver, 0.001).until(expected_conditions.visibility_of_element_located((By.ID, "sourceFile")))
