# Generated by Selenium IDE; edited
import pytest

from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.firefox.options import Options


class TestTablesTours():
    def setup_method(self, method):
        options = Options()
        options.add_argument('--headless')

        self.driver = webdriver.Firefox(options=options) #TODO: is too slow
        self.vars = {}
    
    def teardown_method(self, method):
        self.driver.quit()

    @pytest.mark.slow
    def test_create_table(self, server):
        """
        Check if the table is created correctly.
        """
        self.driver.get(f"{server}/projects/")
        self.driver.set_window_size(1524, 716)

        # Open project
        self.driver.find_element(By.CSS_SELECTOR, ".card:nth-child(2)").click()

        # Click on "Create Table" button, complete inputs and confirm
        self.driver.find_element(By.CSS_SELECTOR, "img").click()
        self.driver.find_element(By.ID, "new_table_name").send_keys("test create new table")
        self.driver.find_element(By.ID, "data_source").click()
        self.driver.find_element(By.CSS_SELECTOR, ".btn-primary:nth-child(10)").click()

        # Check that the table is created
        WebDriverWait(self.driver, 0.001).until(
            expected_conditions.visibility_of_element_located((By.XPATH, "//button[contains(.,\'test create new table\')]")))
        
    @pytest.mark.slow
    def test_sort_column(self, server):
        """
        Check if the column is sorted correctly.
        """
        self.driver.get(f"{server}/projects/")
        self.driver.set_window_size(1524, 716)

        # Open project
        self.driver.find_element(By.CSS_SELECTOR, ".card:nth-child(2) .card-description").click()

        # Click on table header button
        self.driver.find_element(By.CSS_SELECTOR, "#table-html-df th:nth-child(2) > .table-header-btn").click()
        # Click on "Sort" button + confirm
        self.driver.find_element(By.XPATH, "//button[@onclick=\"\n                closeInfoColModal();\n                openSidebarActionForm(\'SortColumn\', getColumnInfo())\"]").click()
        self.driver.find_element(By.CSS_SELECTOR, "form:nth-child(1) > .btn-primary:nth-child(5)").click()
        element = self.driver.find_element(By.CSS_SELECTOR, "#table-html-df tr:nth-child(1) > td:nth-child(2)")
        assert element.text == "0.01"

        # Click on table header button
        self.driver.find_element(By.CSS_SELECTOR, "#table-html-df th:nth-child(2) > .table-header-btn").click()
        # Click on "Sort" button + select descending + confirm
        self.driver.find_element(By.XPATH, "//button[@onclick=\"\n                closeInfoColModal();\n                openSidebarActionForm(\'SortColumn\', getColumnInfo())\"]").click()
        from selenium.webdriver.support.ui import Select
        select_element = self.driver.find_element(By.ID, "sort_order")
        select = Select(select_element)
        select.select_by_value("descending")
        self.driver.find_element(By.CSS_SELECTOR, "form:nth-child(1) > .btn-primary:nth-child(5)").click()
        element = self.driver.find_element(By.CSS_SELECTOR, "#table-html-df tr:nth-child(1) > td:nth-child(2)")
        assert element.text == "2000.0"

        # Sort back to ascending
        self.driver.find_element(By.CSS_SELECTOR, "#table-html-df th:nth-child(2) > .table-header-btn").click()
        self.driver.find_element(By.XPATH, "//button[@onclick=\"\n                closeInfoColModal();\n                openSidebarActionForm(\'SortColumn\', getColumnInfo())\"]").click()
        self.driver.find_element(By.CSS_SELECTOR, "form:nth-child(1) > .btn-primary:nth-child(5)").click()
        element = self.driver.find_element(By.CSS_SELECTOR, "#table-html-df tr:nth-child(1) > td:nth-child(2)")
        assert element.text == "0.01"
